`timescale 10ns/1ns
//////////////////////////////////////////////////////////////////////////////////
// Module Name:    usb_test 
// Description: If the FIFO of EP2 is not empty and 
//              the EP6 is not full, Read the 16bit data from EP2 FIFO
//              and send to EP6 FIFO.  
//////////////////////////////////////////////////////////////////////////////////
module usb_test(
    input fpga_gclk,                       //FPGA Clock Input 50Mhz
    input reset_n,                         //FPGA Reset input
    output reg [1:0] usb_fifoaddr,         //CY68013 FIFO Address
    output reg usb_slcs,                   //CY68013 Chipset select
    output reg usb_sloe,                   //CY68013 Data output enable
    output reg usb_slrd,                   //CY68013 READ indication
    output reg usb_slwr,                   //CY68013 Write indication
    inout [15:0] usb_fd,                   //CY68013 Data
    input usb_flaga,                       //CY68013 EP2 FIFO empty indication; 1:not empty; 0: empty
    input usb_flagb,                       //CY68013 EP4 FIFO empty indication; 1:not empty; 0: empty
    input usb_flagc                        //CY68013 EP6 FIFO full indication; 1:not full; 0: full
	 
    );

reg[15:0] data_reg;

reg bus_busy;                              
reg access_req;                            
reg usb_fd_en;

reg [11:0] access_sequence;                

/* Generate USB read/write access request*/
always @(posedge fpga_gclk or negedge reset_n)
  begin
   if (~reset_n ) begin
      access_req<=1'b0;
	end
   else begin
         if (usb_flaga & usb_flagc & (~bus_busy))          //如果EP2的FIFO不空，EP6的FIFO不满，而且状态为idle
             access_req<=1'b1;                             //USB读写请求
         else 
             access_req<=1'b0;
   end
  end

/* Generate access sequence*/
always @(posedge fpga_gclk or negedge reset_n)
  begin
   if (~reset_n ) begin
		bus_busy<=1'b0;
	   access_sequence<=12'b000000000000;
   end		
   else begin
         if (access_req==1'b1) begin                              //计数开始         
				  access_sequence<=12'b000000000000;
				  bus_busy<=1'b1;                               //状态变忙
			end				
         else 
            if (access_sequence==12'b1111111111110)
				    bus_busy<=1'b0;                              //状态变idle
				else
               access_sequence<=access_sequence+1'b1;				
      end
  end
  
/* Generate USB read and write command*/
always @(posedge fpga_gclk or negedge reset_n)
  begin
   if (~reset_n) begin
		 usb_fifoaddr<=2'b00;
       usb_slcs<=1'b0;		
		 usb_sloe<=1'b0;		
       usb_slrd<=1'b1;	
		 usb_slwr<=1'b1;
       usb_fd_en<=1'b0;		 
   end		
   else begin
	     case(access_sequence)
        12'b000001000000:usb_fifoaddr<=2'b00;	                    //开始读USB EP2 FIFO的数据
        12'b000011000000:usb_sloe<=1'b0;	
        12'b000100000000:usb_slrd <= 1'b0;				 
        12'b001100000000:begin
		                     usb_slrd<=1'b1;
			                  data_reg<=usb_fd;	
        end									
        12'b001110000000:usb_sloe<=1'b1;                        //读FIFO完成
        12'b011000000000:begin                                   //把读到的数据写回到EP6的FIFO中
		                     usb_fifoaddr<= 2'b10;
				   				usb_fd_en<=1'b1;
		  end	
	     12'b100000000000:usb_slwr<=1'b0;
        12'b101110000000:usb_slwr<=1'b1;
		  12'b110000000000:begin
		                     usb_fifoaddr<=2'b00;	
			    			    	usb_fd_en<=1'b0;                      //写完成
		  end
        default;
        endcase
	 end
  end  
  
assign usb_fd = usb_fd_en?data_reg:16'bz; 

endmodule
